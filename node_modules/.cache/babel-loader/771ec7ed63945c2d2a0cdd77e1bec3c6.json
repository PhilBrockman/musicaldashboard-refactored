{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Tour.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\"; // Define the steps\n\nconst TOUR_STEPS = [{\n  target: '.shaker',\n  content: 'Click the yellow die to randomize the initial configuration.',\n  placement: 'top'\n}, {\n  target: '.ask-for-help',\n  content: 'Click to reveal details about this attribute.'\n}, {\n  target: '.ditch-attribute',\n  content: 'Click to remove your customizations. '\n}, {\n  target: '.interactive',\n  content: 'Click to reveal additional attributes to customize.'\n}, {\n  target: '.sidebar-toggler',\n  content: 'Click to toggle attribute selection menu.'\n}, {\n  target: 'input',\n  content: 'When you are satisfide with your customizations, enter your email and click create! You do not need this window open while the system creates your song.'\n}]; // Define our state\n\nconst INITIAL_STATE = {\n  key: new Date(),\n  run: false,\n  continuous: true,\n  loading: false,\n  stepIndex: 0,\n  steps: TOUR_STEPS\n}; // Set up the reducer function\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"START\":\n      return { ...state,\n        run: true\n      };\n\n    case \"RESET\":\n      return { ...state,\n        stepIndex: 0\n      };\n\n    case \"STOP\":\n      return { ...state,\n        run: false\n      };\n\n    case \"NEXT_OR_PREV\":\n      return { ...state,\n        ...action.payload\n      };\n\n    case \"RESTART\":\n      return { ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date()\n      };\n\n    default:\n      return state;\n  }\n}; // Define the Tour component\n\n\nconst Tour = () => {\n  _s();\n\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n  useEffect(() => {\n    if (!localStorage.getItem(\"tour\")) {\n      dispatch({\n        type: \"START\"\n      });\n    }\n  }, []);\n\n  const callback = data => {\n    const {\n      action,\n      index,\n      type,\n      status\n    } = data;\n\n    if (action === ACTIONS.CLOSE || status === STATUS.SKIPPED && tourState.run || status === STATUS.FINISHED) {\n      dispatch({\n        type: \"STOP\"\n      });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: {\n          stepIndex: index + (action === ACTIONS.PREV ? -1 : 1)\n        }\n      });\n    }\n  };\n\n  const startTour = () => {\n    dispatch({\n      type: \"RESTART\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: startTour,\n      children: \"Start Tour\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JoyRide, { ...tourState,\n      continuous: true,\n      callback: callback,\n      showSkipButton: true,\n      locale: {\n        last: \"End tour\",\n        skip: \"Close tour\"\n      },\n      showProgress: true,\n      styles: {\n        options: {\n          // modal arrow and background color\n          arrowColor: \"#eee\",\n          backgroundColor: \"#eee\",\n          // page overlay color\n          overlayColor: \"rgba(0, 26, 79, 0.4)\",\n          //button color\n          primaryColor: \"blue\",\n          //text color\n          textColor: \"black\",\n          //width of modal\n          width: 500,\n          //zindex of modal\n          zIndex: 1000\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; //\n// <JoyRide\n// {...tourState}\n// callback={callback}\n// showSkipButton={true}\n// styles={{\n//   tooltipContainer: {\n//     textAlign: \"left\",\n//   },\n//\n//   buttonBack: {\n//     marginRight: 10,\n//   },\n// }}\n// locale={{\n//   last: \"End tour\",\n// }}\n// />\n\n\n_s(Tour, \"LbnhSfQrIj1HxbSwTbjXNibledo=\");\n\n_c = Tour;\nexport default Tour;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tour\");","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Tour.js"],"names":["React","useReducer","useEffect","JoyRide","ACTIONS","EVENTS","STATUS","TOUR_STEPS","target","content","placement","INITIAL_STATE","key","Date","run","continuous","loading","stepIndex","steps","reducer","state","action","type","payload","Tour","tourState","dispatch","localStorage","getItem","callback","data","index","status","CLOSE","SKIPPED","FINISHED","STEP_AFTER","TARGET_NOT_FOUND","PREV","startTour","last","skip","options","arrowColor","backgroundColor","overlayColor","primaryColor","textColor","width","zIndex"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\n\n// Define the steps\nconst TOUR_STEPS = [\n    {\n      target: '.shaker',\n      content: 'Click the yellow die to randomize the initial configuration.',\n      placement: 'top',\n    },\n    {\n      target: '.ask-for-help',\n      content: 'Click to reveal details about this attribute.',\n    },\n    {\n      target: '.ditch-attribute',\n      content: 'Click to remove your customizations. '\n    },\n    {\n      target: '.interactive',\n      content: 'Click to reveal additional attributes to customize.'\n    },\n    {\n      target: '.sidebar-toggler',\n      content: 'Click to toggle attribute selection menu.'\n    },\n    {\n      target: 'input',\n      content: 'When you are satisfide with your customizations, enter your email and click create! You do not need this window open while the system creates your song.'\n    },\n];\n\n// Define our state\nconst INITIAL_STATE = {\n  key: new Date(),\n  run: false,\n  continuous: true,\n  loading: false,\n  stepIndex: 0,\n  steps: TOUR_STEPS,\n};\n\n// Set up the reducer function\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"START\":\n      return { ...state, run: true };\n    case \"RESET\":\n      return { ...state, stepIndex: 0 };\n    case \"STOP\":\n      return { ...state, run: false };\n    case \"NEXT_OR_PREV\":\n      return { ...state, ...action.payload };\n    case \"RESTART\":\n      return {\n        ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date(),\n      };\n    default:\n      return state;\n  }\n};\n\n// Define the Tour component\nconst Tour = () => {\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n  useEffect(() => {\n    if (!localStorage.getItem(\"tour\")) {\n      dispatch({ type: \"START\" });\n    }\n  }, []);\n  const callback = (data) => {\n    const { action, index, type, status } = data;\n    if (\n      action === ACTIONS.CLOSE ||\n      (status === STATUS.SKIPPED && tourState.run) ||\n      status === STATUS.FINISHED\n    ) {\n      dispatch({ type: \"STOP\" });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n      });\n    }\n  };\n  const startTour = () => {\n    dispatch({ type: \"RESTART\" });\n  };\n  return (\n    <>\n      <button className=\"btn btn-primary\" onClick={startTour}>\n        Start Tour\n      </button>\n      <JoyRide\n        {...tourState}\n        continuous={true}\n        callback={callback}\n        showSkipButton={true}\n        locale={{\n          last: \"End tour\",\n          skip: \"Close tour\"}}\n        showProgress={true}\n        styles={{\n             options: {\n                // modal arrow and background color\n                arrowColor: \"#eee\",\n                backgroundColor: \"#eee\",\n                // page overlay color\n                overlayColor: \"rgba(0, 26, 79, 0.4)\",\n                //button color\n                primaryColor: \"blue\",\n                //text color\n                textColor: \"black\",\n\n                //width of modal\n                width: 500,\n                //zindex of modal\n                zIndex: 1000\n            }\n         }}\n        />\n    </>\n  );\n};\n\n//\n// <JoyRide\n// {...tourState}\n// callback={callback}\n// showSkipButton={true}\n// styles={{\n//   tooltipContainer: {\n//     textAlign: \"left\",\n//   },\n//\n//   buttonBack: {\n//     marginRight: 10,\n//   },\n// }}\n// locale={{\n//   last: \"End tour\",\n// }}\n// />\n\n\nexport default Tour;\n"]},"metadata":{},"sourceType":"module"}