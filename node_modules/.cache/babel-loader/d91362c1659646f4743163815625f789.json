{"ast":null,"code":"class defaults {\n  static menu_items() {\n    return [{\n      title: 'Vanilla MuseNet',\n      icon: {\n        name: 'subject'\n      },\n      children: [{\n        title: \"Composer\",\n        interactive: true,\n        stowed: true,\n        toParam: \"composer\",\n        inputType: \"select\",\n        options: ['chopin', 'mozart', 'rachmaninoff', 'country', 'bach', 'beethoven', 'thebeatles', 'franksinatra', 'tchaikovsky'],\n        default: 'beethoven',\n        info_title: \"The style of music for MuseNet to select.\",\n        info_body: \"\"\n      }, {\n        title: \"Instruments\",\n        interactive: true,\n        stowed: true,\n        toParam: \"instrumentation\",\n        inputType: \"checkboxinput\",\n        options: ['piano', 'strings', 'winds', 'drums', 'harp', 'guitar', 'bass'],\n        default: ['piano'],\n        info_title: \"MuseNet will attempt to generate a song with the checked instruments.\",\n        info_body: \"\"\n      }]\n    }, {\n      title: \"Shape & Form\",\n      icon: {\n        name: \"playlist_add\"\n      },\n      children: [{\n        title: \"Temperature\",\n        interactive: true,\n        stowed: true,\n        toParam: \"temp\",\n        inputType: \"slider\",\n        min: .5,\n        max: 1.5,\n        default: .9,\n        info_title: \"Higher value = more randomness in generation\",\n        info_body: \"A higher temperature will lead to more experimental outputs, while a smaller temperature might lead to overfitting.\"\n      }, {\n        title: \"Length\",\n        interactive: true,\n        stowed: true,\n        toParam: \"length\",\n        inputType: \"slider\",\n        min: 1,\n        max: 6,\n        default: 5,\n        info_title: \"Higher value = longer output\",\n        info_body: \"Automatically request output from MuseNet this many times.\"\n      }]\n    }, {\n      title: 'Fine Tuning',\n      icon: {\n        name: 'queue_music'\n      },\n      children: [{\n        title: \"Quality Control\",\n        interactive: true,\n        stowed: true,\n        toParam: \"cutoff\",\n        inputType: \"slider\",\n        min: 0,\n        max: 1,\n        default: .6,\n        info_title: \"Higher values = more scrunity of musical generations\",\n        info_body: \"Define the minimum percentage confidence that a given generation is of a suitable quality. Only the best for you!\"\n      }, {\n        title: \"Clip Length\",\n        interactive: true,\n        stowed: true,\n        toParam: \"clip_length\",\n        inputType: \"slider\",\n        min: 2,\n        max: 20,\n        default: 5,\n        info_title: \"Lower values = more sensitive to repeats\",\n        info_body: \"When scanning for chunks of repeated music, set the window size of a chunk to this many seconds.\"\n      }, {\n        title: \"Repetition Detection\",\n        interactive: true,\n        stowed: true,\n        toParam: \"repeat_percentage\",\n        inputType: \"slider\",\n        min: 0,\n        max: 1,\n        default: .15,\n        info_title: \"Lower values = more unique musical sections\",\n        info_body: \"Define the cutoff for the maximum percentage of a generation that can contain repeated sections.\"\n      }]\n    }];\n  }\n\n  static test() {\n    return \"aoeu\";\n  }\n\n  static flatten(arr) {\n    if (arr.filter(e => Array.isArray(e)).length > 0) {\n      return this.flatten(arr.flat());\n    } else {\n      return arr;\n    }\n  }\n\n  static interactive_menu_items(obj) {\n    if (obj.hasOwnProperty(\"children\")) {\n      return obj.children.map(item => this.interactive_menu_items(item));\n    } else {\n      if (obj.hasOwnProperty(\"interactive\")) {\n        return obj;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  static to_arr() {\n    return this.flatten(this.menu_items().map(item => this.interactive_menu_items(item)).filter(item => item != null));\n  }\n\n  static initialState() {\n    return this.to_arr().map(item => ({\n      title: item.title,\n      stowed: item.stowed,\n      value: item.default\n    }));\n  }\n\n}\n\nexport default defaults;","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/defaultMenuItems.js"],"names":["defaults","menu_items","title","icon","name","children","interactive","stowed","toParam","inputType","options","default","info_title","info_body","min","max","test","flatten","arr","filter","e","Array","isArray","length","flat","interactive_menu_items","obj","hasOwnProperty","map","item","to_arr","initialState","value"],"mappings":"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","sourcesContent":["class defaults {\n  static menu_items() {\n  return(\n    [{\n      title: 'Vanilla MuseNet',\n      icon: { name: 'subject' },\n      children: [{\n          title: \"Composer\",\n          interactive: true,\n          stowed: true,\n          toParam: \"composer\",\n          inputType: \"select\",\n          options: [\n            'chopin',\n            'mozart',\n            'rachmaninoff',\n            'country',\n            'bach',\n            'beethoven',\n            'thebeatles',\n            'franksinatra',\n            'tchaikovsky'\n          ],\n          default: 'beethoven',\n          info_title: \"The style of music for MuseNet to select.\",\n          info_body: \"\",\n        },\n        {\n          title: \"Instruments\",\n          interactive: true,\n          stowed: true,\n          toParam: \"instrumentation\",\n          inputType: \"checkboxinput\",\n          options: [\n            'piano',\n            'strings',\n            'winds',\n            'drums',\n            'harp',\n            'guitar',\n            'bass',\n          ],\n          default: ['piano'],\n          info_title: \"MuseNet will attempt to generate a song with the checked instruments.\",\n          info_body: \"\",\n        },\n      ]\n    },\n    {\n      title: \"Shape & Form\",\n      icon: { name: \"playlist_add\" },\n      children: [\n        {\n          title: \"Temperature\",\n          interactive: true,\n          stowed: true,\n          toParam: \"temp\",\n          inputType: \"slider\",\n          min: .5,\n          max: 1.5,\n          default: .9,\n          info_title: \"Higher value = more randomness in generation\",\n          info_body: \"A higher temperature will lead to more experimental outputs, while a smaller temperature might lead to overfitting.\",\n\n        },\n        {\n          title: \"Length\",\n          interactive: true,\n          stowed: true,\n          toParam: \"length\",\n          inputType: \"slider\",\n          min: 1,\n          max: 6,\n          default: 5,\n          info_title: \"Higher value = longer output\",\n          info_body: \"Automatically request output from MuseNet this many times.\",\n        },\n      ]\n    },\n    {\n      title: 'Fine Tuning',\n      icon: { name: 'queue_music' },\n      children: [\n        {\n          title: \"Quality Control\",\n          interactive: true,\n          stowed: true,\n          toParam: \"cutoff\",\n          inputType: \"slider\",\n          min: 0,\n          max: 1,\n          default: .6,\n          info_title: \"Higher values = more scrunity of musical generations\",\n          info_body: \"Define the minimum percentage confidence that a given generation is of a suitable quality. Only the best for you!\",\n        },\n        {\n          title: \"Clip Length\",\n          interactive: true,\n          stowed: true,\n          toParam: \"clip_length\",\n          inputType: \"slider\",\n          min: 2,\n          max: 20,\n          default: 5,\n          info_title: \"Lower values = more sensitive to repeats\",\n          info_body: \"When scanning for chunks of repeated music, set the window size of a chunk to this many seconds.\",\n        },\n        {\n          title: \"Repetition Detection\",\n          interactive: true,\n          stowed: true,\n          toParam: \"repeat_percentage\",\n          inputType: \"slider\",\n          min: 0,\n          max: 1,\n          default: .15,\n          info_title: \"Lower values = more unique musical sections\",\n          info_body: \"Define the cutoff for the maximum percentage of a generation that can contain repeated sections.\",\n        },\n      ]\n    },\n    ]);\n  }\n\n  static test(){\n    return \"aoeu\"\n  }\n\n  static flatten(arr) {\n    if (arr.filter(e => Array.isArray(e)).length > 0) {\n      return this.flatten(arr.flat());\n    } else {\n      return arr;\n    }\n  }\n\n  static interactive_menu_items(obj) {\n    if(obj.hasOwnProperty(\"children\")) {\n      return obj.children.map(item => this.interactive_menu_items(item));\n    } else {\n      if (obj.hasOwnProperty(\"interactive\")) {\n        return obj;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  static to_arr(){\n    return this.flatten(this.menu_items().map(item => this.interactive_menu_items(item)).filter(item => item != null))\n  }\n\n  static initialState(){\n    return this.to_arr().map(item=> ({\n      title: item.title,\n      stowed: item.stowed,\n      value: item.default\n    }))\n  }\n}\n\n\n\nexport default defaults;\n"]},"metadata":{},"sourceType":"module"}