{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Tour.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\nimport Button from '@material-ui/core/Button'; // Define the steps\n\nconst TOUR_STEPS = [{\n  target: '.shaker',\n  content: 'Click the yellow die to randomize the initial configuration.',\n  disableBeacon: true\n}, {\n  target: '.ask-for-help',\n  content: 'Click to reveal details about this attribute.'\n}, {\n  target: '.ditch-attribute',\n  content: 'Click to remove your customizations. '\n}, {\n  target: '.interactive',\n  content: 'Click to reveal additional attributes to customize.'\n}, {\n  target: '.sidebar-toggler',\n  content: 'Click to toggle attribute selection menu.'\n}, {\n  target: 'input',\n  content: 'When you are satisfide with your customizations, enter your email and click create! You do not need this window open while the system creates your song.'\n}, {\n  target: '.tour-button',\n  content: 'Click here to replay the tour.'\n}]; // Define our state\n\nconst INITIAL_STATE = {\n  key: new Date(),\n  run: false,\n  continuous: true,\n  loading: false,\n  stepIndex: 0,\n  steps: TOUR_STEPS\n}; // Set up the reducer function\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"START\":\n      return { ...state,\n        run: true\n      };\n\n    case \"RESET\":\n      return { ...state,\n        stepIndex: 0\n      };\n\n    case \"STOP\":\n      return { ...state,\n        run: false\n      };\n\n    case \"NEXT_OR_PREV\":\n      return { ...state,\n        ...action.payload\n      };\n\n    case \"RESTART\":\n      return { ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date()\n      };\n\n    default:\n      return state;\n  }\n}; // Define the Tour component\n\n\nconst Tour = () => {\n  _s();\n\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n  useEffect(() => {\n    if (!localStorage.getItem(\"tour\")) {// dispatch({ type: \"START\" });\n    }\n  }, []);\n\n  const callback = data => {\n    const {\n      action,\n      index,\n      type,\n      status\n    } = data;\n\n    if (action === ACTIONS.CLOSE || status === STATUS.SKIPPED && tourState.run || status === STATUS.FINISHED) {\n      dispatch({\n        type: \"STOP\"\n      });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: {\n          stepIndex: index + (action === ACTIONS.PREV ? -1 : 1)\n        }\n      });\n    }\n  };\n\n  const startTour = () => {\n    dispatch({\n      type: \"RESTART\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      className: \"tour-button\",\n      onClick: startTour,\n      children: \"Start Tour\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JoyRide, { ...tourState,\n      callback: callback,\n      showSkipButton: true,\n      styles: {\n        tooltipContainer: {\n          textAlign: \"left\"\n        },\n        buttonBack: {\n          marginRight: 10\n        }\n      },\n      locale: {\n        last: \"End tour\",\n        skip: \"Close tour\"\n      },\n      showProgress: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Tour, \"LbnhSfQrIj1HxbSwTbjXNibledo=\");\n\n_c = Tour;\nexport default Tour; // import React, { useReducer, useEffect } from \"react\";\n// import JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\n//\n// // Define the steps\n// const TOUR_STEPS = [\n// {\n//   target: '.shaker',\n//   content: 'Click the yellow die to randomize the initial configuration.',\n//   placement: 'top',\n// },\n// {\n//   target: '.ask-for-help',\n//   content: 'Click to reveal details about this attribute.',\n// },\n// {\n//   target: '.ditch-attribute',\n//   content: 'Click to remove your customizations. '\n// },\n// {\n//   target: '.interactive',\n//   content: 'Click to reveal additional attributes to customize.'\n// },\n// {\n//   target: '.sidebar-toggler',\n//   content: 'Click to toggle attribute selection menu.'\n// },\n// {\n//   target: 'input',\n//   content: 'When you are satisfide with your customizations, enter your email and click create! You do not need this window open while the system creates your song.'\n// },\n// ];\n//\n// // Define our state\n// const INITIAL_STATE = {\n//   key: new Date(),\n//   run: false,\n//   continuous: true,\n//   loading: false,\n//   stepIndex: 0,\n//   steps: TOUR_STEPS,\n// };\n//\n// // Set up the reducer function\n// const reducer = (state = INITIAL_STATE, action) => {\n//   switch (action.type) {\n//     case \"START\":\n//       return { ...state, run: true };\n//     case \"RESET\":\n//       return { ...state, stepIndex: 0 };\n//     case \"STOP\":\n//       return { ...state, run: false };\n//     case \"NEXT_OR_PREV\":\n//       return { ...state, ...action.payload };\n//     case \"RESTART\":\n//       return {\n//         ...state,\n//         stepIndex: 0,\n//         run: true,\n//         loading: false,\n//         key: new Date(),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n//\n// // Define the Tour component\n// const Tour = () => {\n//   const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"tour\")) {\n//       dispatch({ type: \"START\" });\n//     }\n//   }, []);\n//   const callback = (data) => {\n//     const { action, index, type, status } = data;\n//     if (\n//       action === ACTIONS.CLOSE ||\n//       (status === STATUS.SKIPPED && tourState.run) ||\n//       status === STATUS.FINISHED\n//     ) {\n//       dispatch({ type: \"STOP\" });\n//     } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n//       dispatch({\n//         type: \"NEXT_OR_PREV\",\n//         payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n//       });\n//     }\n//   };\n//   const startTour = () => {\n//     dispatch({ type: \"RESTART\" });\n//   };\n//   return (\n//     <>\n//       <button className=\"btn btn-primary\" onClick={startTour}>\n//         Start Tour\n//       </button>\n//       <JoyRide\n//         {...tourState}\n//         callback={callback}\n//         showSkipButton={true}\n//         styles={{\n//              options: {\n//                 // modal arrow and background color\n//                 arrowColor: \"#eee\",\n//                 backgroundColor: \"#eee\",\n//                 // page overlay color\n//                 overlayColor: \"rgba(0, 26, 79, 0.4)\",\n//                 //button color\n//                 primaryColor: \"blue\",\n//                 //text color\n//                 textColor: \"black\",\n//                 //width of modal\n//                 width: 500,\n//                 //zindex of modal\n//                 zIndex: 1000\n//             }\n//          }}\n//         />\n// //     </>\n//   );\n// };\n//\n// //\n// // <JoyRide\n// // {...tourState}\n// // callback={callback}\n// // showSkipButton={true}\n// // styles={{\n// //   tooltipContainer: {\n// //     textAlign: \"left\",\n// //   },\n// //\n// //   buttonBack: {\n// //     marginRight: 10,\n// //   },\n// // }}\n// // locale={{\n// //   last: \"End tour\",\n// // }}\n// // />\n//\n//\n// export default Tour;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tour\");","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Tour.js"],"names":["React","useReducer","useEffect","JoyRide","ACTIONS","EVENTS","STATUS","Button","TOUR_STEPS","target","content","disableBeacon","INITIAL_STATE","key","Date","run","continuous","loading","stepIndex","steps","reducer","state","action","type","payload","Tour","tourState","dispatch","localStorage","getItem","callback","data","index","status","CLOSE","SKIPPED","FINISHED","STEP_AFTER","TARGET_NOT_FOUND","PREV","startTour","tooltipContainer","textAlign","buttonBack","marginRight","last","skip"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,OAAP,IAAkBC,OAAlB,EAA2BC,MAA3B,EAAmCC,MAAnC,QAAiD,eAAjD;AACA,OAAOC,MAAP,MAAmB,0BAAnB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,CACjB;AACEC,EAAAA,MAAM,EAAE,SADV;AAEEC,EAAAA,OAAO,EAAE,8DAFX;AAGEC,EAAAA,aAAa,EAAC;AAHhB,CADiB,EAMjB;AACEF,EAAAA,MAAM,EAAE,eADV;AAEEC,EAAAA,OAAO,EAAE;AAFX,CANiB,EAUjB;AACED,EAAAA,MAAM,EAAE,kBADV;AAEEC,EAAAA,OAAO,EAAE;AAFX,CAViB,EAcjB;AACED,EAAAA,MAAM,EAAE,cADV;AAEEC,EAAAA,OAAO,EAAE;AAFX,CAdiB,EAkBjB;AACED,EAAAA,MAAM,EAAE,kBADV;AAEEC,EAAAA,OAAO,EAAE;AAFX,CAlBiB,EAsBjB;AACED,EAAAA,MAAM,EAAE,OADV;AAEEC,EAAAA,OAAO,EAAE;AAFX,CAtBiB,EA0BjB;AACED,EAAAA,MAAM,EAAE,cADV;AAEEC,EAAAA,OAAO,EAAE;AAFX,CA1BiB,CAAnB,C,CAgCA;;AACA,MAAME,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,IAAIC,IAAJ,EADe;AAEpBC,EAAAA,GAAG,EAAE,KAFe;AAGpBC,EAAAA,UAAU,EAAE,IAHQ;AAIpBC,EAAAA,OAAO,EAAE,KAJW;AAKpBC,EAAAA,SAAS,EAAE,CALS;AAMpBC,EAAAA,KAAK,EAAEX;AANa,CAAtB,C,CASA;;AACA,MAAMY,OAAO,GAAG,CAACC,KAAK,GAAGT,aAAT,EAAwBU,MAAxB,KAAmC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,OAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYN,QAAAA,GAAG,EAAE;AAAjB,OAAP;;AACF,SAAK,OAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYH,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAK,MAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYN,QAAAA,GAAG,EAAE;AAAjB,OAAP;;AACF,SAAK,cAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAY,WAAGC,MAAM,CAACE;AAAtB,OAAP;;AACF,SAAK,SAAL;AACE,aAAO,EACL,GAAGH,KADE;AAELH,QAAAA,SAAS,EAAE,CAFN;AAGLH,QAAAA,GAAG,EAAE,IAHA;AAILE,QAAAA,OAAO,EAAE,KAJJ;AAKLJ,QAAAA,GAAG,EAAE,IAAIC,IAAJ;AALA,OAAP;;AAOF;AACE,aAAOO,KAAP;AAlBJ;AAoBD,CArBD,C,CAuBA;;;AACA,MAAMI,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAwB1B,UAAU,CAACmB,OAAD,EAAUR,aAAV,CAAxC;AACAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAC0B,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAL,EAAmC,CACjC;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;;AAKA,QAAMC,QAAQ,GAAIC,IAAD,IAAU;AACzB,UAAM;AAAET,MAAAA,MAAF;AAAUU,MAAAA,KAAV;AAAiBT,MAAAA,IAAjB;AAAuBU,MAAAA;AAAvB,QAAkCF,IAAxC;;AACA,QACET,MAAM,KAAKlB,OAAO,CAAC8B,KAAnB,IACCD,MAAM,KAAK3B,MAAM,CAAC6B,OAAlB,IAA6BT,SAAS,CAACX,GADxC,IAEAkB,MAAM,KAAK3B,MAAM,CAAC8B,QAHpB,EAIE;AACAT,MAAAA,QAAQ,CAAC;AAAEJ,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACD,KAND,MAMO,IAAIA,IAAI,KAAKlB,MAAM,CAACgC,UAAhB,IAA8Bd,IAAI,KAAKlB,MAAM,CAACiC,gBAAlD,EAAoE;AACzEX,MAAAA,QAAQ,CAAC;AACPJ,QAAAA,IAAI,EAAE,cADC;AAEPC,QAAAA,OAAO,EAAE;AAAEN,UAAAA,SAAS,EAAEc,KAAK,IAAIV,MAAM,KAAKlB,OAAO,CAACmC,IAAnB,GAA0B,CAAC,CAA3B,GAA+B,CAAnC;AAAlB;AAFF,OAAD,CAAR;AAID;AACF,GAdD;;AAeA,QAAMC,SAAS,GAAG,MAAM;AACtBb,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAGA,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,OAAO,EAAC,WADV;AAEE,MAAA,SAAS,EAAC,aAFZ;AAGE,MAAA,OAAO,EAAEiB,SAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAQE,QAAC,OAAD,OACMd,SADN;AAEE,MAAA,QAAQ,EAAEI,QAFZ;AAGE,MAAA,cAAc,EAAE,IAHlB;AAIE,MAAA,MAAM,EAAE;AACNW,QAAAA,gBAAgB,EAAE;AAChBC,UAAAA,SAAS,EAAE;AADK,SADZ;AAKNC,QAAAA,UAAU,EAAE;AACVC,UAAAA,WAAW,EAAE;AADH;AALN,OAJV;AAaE,MAAA,MAAM,EAAE;AACNC,QAAAA,IAAI,EAAE,UADA;AAENC,QAAAA,IAAI,EAAE;AAFA,OAbV;AAgBE,MAAA,YAAY,EAAE;AAhBhB;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AA6BD,CAtDD;;GAAMrB,I;;KAAAA,I;AAuDN,eAAeA,IAAfsourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\nimport Button from '@material-ui/core/Button';\n\n// Define the steps\nconst TOUR_STEPS = [\n  {\n    target: '.shaker',\n    content: 'Click the yellow die to randomize the initial configuration.',\n    disableBeacon:true,\n  },\n  {\n    target: '.ask-for-help',\n    content: 'Click to reveal details about this attribute.',\n  },\n  {\n    target: '.ditch-attribute',\n    content: 'Click to remove your customizations. '\n  },\n  {\n    target: '.interactive',\n    content: 'Click to reveal additional attributes to customize.'\n  },\n  {\n    target: '.sidebar-toggler',\n    content: 'Click to toggle attribute selection menu.'\n  },\n  {\n    target: 'input',\n    content: 'When you are satisfide with your customizations, enter your email and click create! You do not need this window open while the system creates your song.'\n  },\n  {\n    target: '.tour-button',\n    content: 'Click here to replay the tour.'\n  }\n];\n\n// Define our state\nconst INITIAL_STATE = {\n  key: new Date(),\n  run: false,\n  continuous: true,\n  loading: false,\n  stepIndex: 0,\n  steps: TOUR_STEPS,\n};\n\n// Set up the reducer function\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"START\":\n      return { ...state, run: true };\n    case \"RESET\":\n      return { ...state, stepIndex: 0 };\n    case \"STOP\":\n      return { ...state, run: false };\n    case \"NEXT_OR_PREV\":\n      return { ...state, ...action.payload };\n    case \"RESTART\":\n      return {\n        ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date(),\n      };\n    default:\n      return state;\n  }\n};\n\n// Define the Tour component\nconst Tour = () => {\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n  useEffect(() => {\n    if (!localStorage.getItem(\"tour\")) {\n      // dispatch({ type: \"START\" });\n    }\n  }, []);\n  const callback = (data) => {\n    const { action, index, type, status } = data;\n    if (\n      action === ACTIONS.CLOSE ||\n      (status === STATUS.SKIPPED && tourState.run) ||\n      status === STATUS.FINISHED\n    ) {\n      dispatch({ type: \"STOP\" });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n      });\n    }\n  };\n  const startTour = () => {\n    dispatch({ type: \"RESTART\" });\n  };\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        className=\"tour-button\"\n        onClick={startTour}\n        >\n        Start Tour\n      </Button>\n      <JoyRide\n        {...tourState}\n        callback={callback}\n        showSkipButton={true}\n        styles={{\n          tooltipContainer: {\n            textAlign: \"left\",\n          },\n\n          buttonBack: {\n            marginRight: 10,\n          },\n        }}\n        locale={{\n          last: \"End tour\",\n          skip: \"Close tour\"}}\n        showProgress={true}\n      />\n    </>\n  );\n};\nexport default Tour;\n\n\n// import React, { useReducer, useEffect } from \"react\";\n// import JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\n//\n// // Define the steps\n// const TOUR_STEPS = [\n    // {\n    //   target: '.shaker',\n    //   content: 'Click the yellow die to randomize the initial configuration.',\n    //   placement: 'top',\n    // },\n    // {\n    //   target: '.ask-for-help',\n    //   content: 'Click to reveal details about this attribute.',\n    // },\n    // {\n    //   target: '.ditch-attribute',\n    //   content: 'Click to remove your customizations. '\n    // },\n    // {\n    //   target: '.interactive',\n    //   content: 'Click to reveal additional attributes to customize.'\n    // },\n    // {\n    //   target: '.sidebar-toggler',\n    //   content: 'Click to toggle attribute selection menu.'\n    // },\n    // {\n    //   target: 'input',\n    //   content: 'When you are satisfide with your customizations, enter your email and click create! You do not need this window open while the system creates your song.'\n    // },\n// ];\n//\n// // Define our state\n// const INITIAL_STATE = {\n//   key: new Date(),\n//   run: false,\n//   continuous: true,\n//   loading: false,\n//   stepIndex: 0,\n//   steps: TOUR_STEPS,\n// };\n//\n// // Set up the reducer function\n// const reducer = (state = INITIAL_STATE, action) => {\n//   switch (action.type) {\n//     case \"START\":\n//       return { ...state, run: true };\n//     case \"RESET\":\n//       return { ...state, stepIndex: 0 };\n//     case \"STOP\":\n//       return { ...state, run: false };\n//     case \"NEXT_OR_PREV\":\n//       return { ...state, ...action.payload };\n//     case \"RESTART\":\n//       return {\n//         ...state,\n//         stepIndex: 0,\n//         run: true,\n//         loading: false,\n//         key: new Date(),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n//\n// // Define the Tour component\n// const Tour = () => {\n//   const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n//   useEffect(() => {\n//     if (!localStorage.getItem(\"tour\")) {\n//       dispatch({ type: \"START\" });\n//     }\n//   }, []);\n//   const callback = (data) => {\n//     const { action, index, type, status } = data;\n//     if (\n//       action === ACTIONS.CLOSE ||\n//       (status === STATUS.SKIPPED && tourState.run) ||\n//       status === STATUS.FINISHED\n//     ) {\n//       dispatch({ type: \"STOP\" });\n//     } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n//       dispatch({\n//         type: \"NEXT_OR_PREV\",\n//         payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n//       });\n//     }\n//   };\n//   const startTour = () => {\n//     dispatch({ type: \"RESTART\" });\n//   };\n//   return (\n//     <>\n//       <button className=\"btn btn-primary\" onClick={startTour}>\n//         Start Tour\n//       </button>\n//       <JoyRide\n//         {...tourState}\n//         callback={callback}\n//         showSkipButton={true}\n//         styles={{\n//              options: {\n//                 // modal arrow and background color\n//                 arrowColor: \"#eee\",\n//                 backgroundColor: \"#eee\",\n//                 // page overlay color\n//                 overlayColor: \"rgba(0, 26, 79, 0.4)\",\n//                 //button color\n//                 primaryColor: \"blue\",\n//                 //text color\n//                 textColor: \"black\",\n//                 //width of modal\n//                 width: 500,\n//                 //zindex of modal\n//                 zIndex: 1000\n//             }\n//          }}\n//         />\n// //     </>\n//   );\n// };\n//\n// //\n// // <JoyRide\n// // {...tourState}\n// // callback={callback}\n// // showSkipButton={true}\n// // styles={{\n// //   tooltipContainer: {\n// //     textAlign: \"left\",\n// //   },\n// //\n// //   buttonBack: {\n// //     marginRight: 10,\n// //   },\n// // }}\n// // locale={{\n// //   last: \"End tour\",\n// // }}\n// // />\n//\n//\n// export default Tour;\n"]},"metadata":{},"sourceType":"module"}