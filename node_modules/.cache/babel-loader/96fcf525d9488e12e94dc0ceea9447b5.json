{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/App.js\";\nimport './App.css';\nimport './index.css';\nimport \"./Layouts/Sidebar/SideBar.css\";\nimport Header from './Layouts/Header/Header';\nimport MenuItems from \"./Layouts/Sidebar/MenuItems\";\nimport MusicBox from \"./Layouts/MainContent/MusicBox\";\nimport Tour from './Tour';\nimport React, { Component } from 'react';\nimport defaults from './defaultMenuItems';\n\nfunction shuffle(array) {\n  var currentIndex = array.length,\n      temporaryValue,\n      randomIndex; // While there remain elements to shuffle...\n\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction getRandomSubarray(arr, size) {\n  var shuffled = arr.slice(0),\n      i = arr.length,\n      temp,\n      index;\n\n  while (i--) {\n    index = Math.floor((i + 1) * Math.random());\n    temp = shuffled[index];\n    shuffled[index] = shuffled[i];\n    shuffled[i] = temp;\n  }\n\n  return shuffled.slice(0, size);\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuItems: defaults.initialState(),\n      sidebarOpen: false\n    };\n    this.handleViewSidebar = this.handleViewSidebar.bind(this);\n    this.handleMenuItemDismissal = this.handleMenuItemDismissal.bind(this);\n    this.updateMenuItemValue = this.updateMenuItemValue.bind(this);\n    this.resetState = this.resetState.bind(this);\n    this.randomizeState = this.randomizeState.bind(this);\n  }\n\n  resetState() {\n    this.setState(prevState => {\n      return { ...prevState,\n        menuItems: defaults.initialState()\n      };\n    });\n  }\n\n  randomizeState() {\n    const options = defaults.to_arr(defaults.menu_items());\n    const randTitle = options[Math.floor(Math.random() * options.length)].title;\n    const newState = options.map(item => {\n      let notStowed = Math.random() < .5 || item.title === randTitle;\n      let value = item.default;\n\n      if (notStowed) {\n        switch (item.inputType) {\n          case \"slider\":\n            value = Math.random() * (item.max - item.min) + item.min;\n\n            if (item.max < 3) {\n              value = Math.round(value * 100) / 100;\n            } else {\n              value = Math.ceil(value);\n            }\n\n            break;\n\n          case \"select\":\n            value = item.options[Math.floor(Math.random() * item.options.length)];\n            break;\n\n          case \"checkboxinput\":\n            value = getRandomSubarray(item.options, 3);\n            break;\n\n          default:\n            console.log('>> broke');\n            break;\n        }\n      }\n\n      return {\n        title: item.title,\n        stowed: !notStowed,\n        value: value\n      };\n    });\n    this.setState(prevState => ({ ...prevState,\n      menuItems: shuffle(newState)\n    }));\n  }\n\n  handleMenuItemDismissal(title) {\n    let newMenuItemsState = Object.assign([], this.state.menuItems);\n    const itemIdx = newMenuItemsState.findIndex(item => item.title === title);\n    newMenuItemsState[itemIdx] = { ...newMenuItemsState[itemIdx],\n      stowed: !newMenuItemsState[itemIdx].stowed\n    };\n    this.setState(prevState => {\n      return { ...prevState,\n        menuItems: newMenuItemsState\n      };\n    });\n  }\n\n  updateMenuItemValue(title, newValue) {\n    let newMenuItemsState = Object.assign([], this.state.menuItems);\n    const itemIdx = newMenuItemsState.findIndex(item => item.title === title);\n    newMenuItemsState[itemIdx] = { ...newMenuItemsState[itemIdx],\n      value: newValue\n    };\n    this.setState(prevState => {\n      return { ...prevState,\n        menuItems: newMenuItemsState\n      };\n    });\n  }\n\n  handleViewSidebar() {\n    this.setState(prevState => {\n      return { ...prevState,\n        sidebarOpen: !this.state.sidebarOpen\n      };\n    });\n  }\n\n  render() {\n    const {\n      steps\n    } = this.state;\n    var sidebarClass = this.state.sidebarOpen ? 'sidebar open' : 'sidebar closed';\n    var exploded_menu_items = this.state.menuItems.filter(item => !item.stowed);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          toggleSidebar: this.handleViewSidebar,\n          sidebarOpen: this.state.sidebarOpen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: sidebarClass,\n          children: /*#__PURE__*/_jsxDEV(MenuItems, {\n            invokedMenuItems: exploded_menu_items,\n            menuOpen: this.state.sidebarOpen,\n            clickback: this.handleMenuItemDismissal,\n            children: defaults.menu_items()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content-area\",\n          children: /*#__PURE__*/_jsxDEV(MusicBox, {\n            invokedMenuItems: exploded_menu_items,\n            clickback: this.handleMenuItemDismissal,\n            updateValue: this.updateMenuItemValue,\n            resetState: this.resetState,\n            randomizeState: this.randomizeState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tour, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/App.js"],"names":["Header","MenuItems","MusicBox","Tour","React","Component","defaults","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","getRandomSubarray","arr","size","shuffled","slice","i","temp","index","App","constructor","props","state","menuItems","initialState","sidebarOpen","handleViewSidebar","bind","handleMenuItemDismissal","updateMenuItemValue","resetState","randomizeState","setState","prevState","options","to_arr","menu_items","randTitle","title","newState","map","item","notStowed","value","default","inputType","max","min","round","ceil","console","log","stowed","newMenuItemsState","Object","assign","itemIdx","findIndex","newValue","render","steps","sidebarClass","exploded_menu_items","filter"],"mappings":"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","sourcesContent":["import './App.css';\nimport './index.css';\nimport \"./Layouts/Sidebar/SideBar.css\"\n\nimport Header from './Layouts/Header/Header';\nimport MenuItems from \"./Layouts/Sidebar/MenuItems\";\nimport MusicBox from \"./Layouts/MainContent/MusicBox\";\nimport Tour from './Tour';\n\nimport React, {Component} from 'react';\n\nimport defaults from './defaultMenuItems';\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction getRandomSubarray(arr, size) {\n    var shuffled = arr.slice(0), i = arr.length, temp, index;\n    while (i--) {\n        index = Math.floor((i + 1) * Math.random());\n        temp = shuffled[index];\n        shuffled[index] = shuffled[i];\n        shuffled[i] = temp;\n    }\n    return shuffled.slice(0, size);\n}\n\nclass App extends Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      menuItems: defaults.initialState(),\n      sidebarOpen: false,\n    };\n\n    this.handleViewSidebar = this.handleViewSidebar.bind(this);\n    this.handleMenuItemDismissal = this.handleMenuItemDismissal.bind(this);\n    this.updateMenuItemValue = this.updateMenuItemValue.bind(this);\n    this.resetState = this.resetState.bind(this)\n    this.randomizeState = this.randomizeState.bind(this)\n  }\n\n  resetState(){\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        menuItems: defaults.initialState(),\n      }\n    });\n  }\n\n\n  randomizeState(){\n    const options = defaults.to_arr(defaults.menu_items());\n\n    const randTitle = options[Math.floor(Math.random()*options.length)].title\n\n    const newState = options.map(item => {\n      let notStowed = Math.random() < .5 || item.title === randTitle;\n      let value = item.default\n\n      if(notStowed) {\n        switch (item.inputType) {\n          case \"slider\":\n            value = Math.random()*(item.max - item.min)+item.min;\n            if (item.max < 3){\n              value = Math.round(value*100)/100\n            } else {\n              value = Math.ceil(value)\n            }\n            break;\n          case \"select\":\n            value = item.options[Math.floor(Math.random()*item.options.length)];\n            break;\n          case \"checkboxinput\":\n            value = getRandomSubarray(item.options, 3);\n            break;\n          default:\n            console.log('>> broke')\n            break;\n        }\n      }\n\n      return {\n           title: item.title,\n           stowed: !notStowed,\n           value: value,\n      }\n    })\n\n    this.setState(prevState => ({\n      ...prevState,\n      menuItems: shuffle(newState),\n    }))\n  }\n\n  handleMenuItemDismissal(title){\n    let newMenuItemsState = Object.assign([], this.state.menuItems);\n    const itemIdx = newMenuItemsState.findIndex(item => item.title===title);\n\n    newMenuItemsState[itemIdx] = {\n      ...newMenuItemsState[itemIdx],\n      stowed: !newMenuItemsState[itemIdx].stowed\n    };\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        menuItems: newMenuItemsState\n      }\n    });\n  }\n\n  updateMenuItemValue(title, newValue){\n    let newMenuItemsState = Object.assign([], this.state.menuItems);\n    const itemIdx = newMenuItemsState.findIndex(item => item.title===title);\n\n    newMenuItemsState[itemIdx] = {\n      ...newMenuItemsState[itemIdx],\n      value: newValue,\n    };\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        menuItems: newMenuItemsState\n      }\n    });\n  }\n\n  handleViewSidebar(){\n    this.setState(prevState => {\n      return{\n        ...prevState,\n        sidebarOpen: !this.state.sidebarOpen,\n      }\n    });\n  }\n\n  render(){\n    const {steps} = this.state;\n    var sidebarClass = this.state.sidebarOpen ? 'sidebar open' : 'sidebar closed';\n    var exploded_menu_items = this.state.menuItems.filter(item => !item.stowed)\n\n    return (\n      <>\n        <div className=\"App\">\n          <Header toggleSidebar={this.handleViewSidebar} sidebarOpen={this.state.sidebarOpen} />\n\n          <div className={sidebarClass}>\n            <MenuItems\n              invokedMenuItems={exploded_menu_items}\n              menuOpen={this.state.sidebarOpen}\n              clickback={this.handleMenuItemDismissal}>\n              {defaults.menu_items()}\n            </MenuItems>\n          </div>\n          <div className=\"content-area\">\n            <MusicBox\n              invokedMenuItems={exploded_menu_items}\n              clickback={this.handleMenuItemDismissal}\n              updateValue={this.updateMenuItemValue}\n              resetState={this.resetState}\n              randomizeState={this.randomizeState}/>\n          </div>\n        </div>\n\n        <Tour />\n        </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}