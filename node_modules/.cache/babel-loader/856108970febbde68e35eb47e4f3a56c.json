{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/SplashScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\"; // Define the steps\n\nconst TOUR_STEPS = [{\n  target: \".tour-button\",\n  content: \"Want to take the tour?\",\n  disableBeacon: true,\n  disableOverlayClose: true,\n  spotlightClicks: true\n}]; // Define our state\n\nconst INITIAL_STATE = {\n  key: new Date(),\n  run: false,\n  continuous: true,\n  loading: false,\n  stepIndex: 0,\n  steps: TOUR_STEPS\n}; // Set up the reducer function\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"START\":\n      return { ...state,\n        run: true\n      };\n\n    case \"RESET\":\n      return { ...state,\n        stepIndex: 0\n      };\n\n    case \"STOP\":\n      return { ...state,\n        run: false\n      };\n\n    case \"NEXT_OR_PREV\":\n      return { ...state,\n        ...action.payload\n      };\n\n    case \"RESTART\":\n      return { ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date()\n      };\n\n    default:\n      return state;\n  }\n}; // Define the Tour component\n\n\nconst SplashScreen = () => {\n  _s();\n\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n  useEffect(() => {\n    if (!localStorage.getItem(\"tour\")) {\n      dispatch({\n        type: \"START\"\n      });\n    }\n  }, []);\n\n  const callback = data => {\n    const {\n      action,\n      index,\n      type,\n      status\n    } = data;\n\n    if (action === ACTIONS.CLOSE || status === STATUS.SKIPPED && tourState.run || status === STATUS.FINISHED) {\n      dispatch({\n        type: \"STOP\"\n      });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: {\n          stepIndex: index + (action === ACTIONS.PREV ? -1 : 1)\n        }\n      });\n    }\n  };\n\n  const startTour = () => {\n    dispatch({\n      type: \"RESTART\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(JoyRide, { ...tourState,\n      styles: {\n        tooltipContainer: {\n          textAlign: \"left\"\n        },\n        buttonBack: {\n          marginRight: 10\n        },\n        spotlight: {\n          backgroundColor: 'none',\n          borderRadius: 0,\n          boxShadow: '0px 0px 0px 9999px rgba(0,154,223,0.9)'\n        }\n      },\n      locale: {\n        last: \"Naw, I'm ready to roll the dice\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(SplashScreen, \"LbnhSfQrIj1HxbSwTbjXNibledo=\");\n\n_c = SplashScreen;\nexport default SplashScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SplashScreen\");","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/SplashScreen.js"],"names":["React","useReducer","useEffect","JoyRide","ACTIONS","EVENTS","STATUS","TOUR_STEPS","target","content","disableBeacon","disableOverlayClose","spotlightClicks","INITIAL_STATE","key","Date","run","continuous","loading","stepIndex","steps","reducer","state","action","type","payload","SplashScreen","tourState","dispatch","localStorage","getItem","callback","data","index","status","CLOSE","SKIPPED","FINISHED","STEP_AFTER","TARGET_NOT_FOUND","PREV","startTour","tooltipContainer","textAlign","buttonBack","marginRight","spotlight","backgroundColor","borderRadius","boxShadow","last"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport JoyRide, { ACTIONS, EVENTS, STATUS } from \"react-joyride\";\n\n// Define the steps\nconst TOUR_STEPS = [\n  {\n    target: \".tour-button\",\n    content: \"Want to take the tour?\",\n    disableBeacon:true,\n    disableOverlayClose: true,\n    spotlightClicks: true,\n  }\n];\n\n// Define our state\nconst INITIAL_STATE = {\n  key: new Date(),\n  run: false,\n  continuous: true,\n  loading: false,\n  stepIndex: 0,\n  steps: TOUR_STEPS,\n};\n\n// Set up the reducer function\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case \"START\":\n      return { ...state, run: true };\n    case \"RESET\":\n      return { ...state, stepIndex: 0 };\n    case \"STOP\":\n      return { ...state, run: false };\n    case \"NEXT_OR_PREV\":\n      return { ...state, ...action.payload };\n    case \"RESTART\":\n      return {\n        ...state,\n        stepIndex: 0,\n        run: true,\n        loading: false,\n        key: new Date(),\n      };\n    default:\n      return state;\n  }\n};\n\n// Define the Tour component\nconst SplashScreen = () => {\n  const [tourState, dispatch] = useReducer(reducer, INITIAL_STATE);\n  useEffect(() => {\n    if (!localStorage.getItem(\"tour\")) {\n      dispatch({ type: \"START\" });\n    }\n  }, []);\n  const callback = (data) => {\n    const { action, index, type, status } = data;\n    if (\n      action === ACTIONS.CLOSE ||\n      (status === STATUS.SKIPPED && tourState.run) ||\n      status === STATUS.FINISHED\n    ) {\n      dispatch({ type: \"STOP\" });\n    } else if (type === EVENTS.STEP_AFTER || type === EVENTS.TARGET_NOT_FOUND) {\n      dispatch({\n        type: \"NEXT_OR_PREV\",\n        payload: { stepIndex: index + (action === ACTIONS.PREV ? -1 : 1) },\n      });\n    }\n  };\n  const startTour = () => {\n    dispatch({ type: \"RESTART\" });\n  };\n  return (\n    <>\n      <JoyRide\n        {...tourState}\n        styles={{\n          tooltipContainer: {\n            textAlign: \"left\",\n          },\n\n          buttonBack: {\n            marginRight: 10,\n          },\n\t\tspotlight: {\n\t\t\tbackgroundColor: 'none',\n\t\t\tborderRadius: 0,\n\t\t\tboxShadow: '0px 0px 0px 9999px rgba(0,154,223,0.9)',\n\t\t},\n        }}\n        locale={{\n          last: \"Naw, I'm ready to roll the dice\",\n        }}\n      />\n    </>\n  );\n};\nexport default SplashScreen;\n"]},"metadata":{},"sourceType":"module"}