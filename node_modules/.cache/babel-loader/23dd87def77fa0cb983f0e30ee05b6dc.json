{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Layouts/MusicBoxInput.js\";\nimport \"./MusicBox.css\";\nimport Slider from '@material-ui/core/Slider';\nimport React, { Component } from 'react';\nimport defaults from './defaultMenuItems';\nconst options = defaults.to_arr(defaults.menu_items());\n\nclass MusicBoxInput extends Component {\n  constructor(props) {\n    super(props);\n    this.updateValue = this.props.updateValue.bind(this);\n  }\n\n  handleChange(event, val) {\n    this.updateValue(this.props.item.title, val);\n  }\n\n  handleSelectionChange(event) {\n    this.updateValue(this.props.item.title, event.target.value);\n  }\n\n  handleCheckboxChange(event, currentValue) {\n    const target = event.target.value;\n    let update;\n\n    if (Array.isArray(currentValue)) {\n      if (currentValue.includes(target)) {\n        update = currentValue.filter(item => item !== target);\n      } else {\n        update = currentValue.concat(target);\n      }\n    } else {\n      update = [target];\n    }\n\n    this.updateValue(this.props.item.title, update); // this.updateValue(this.props.item.title, event.target.value)\n  }\n\n  render() {\n    const specific_item = options.find(item => item.title === this.props.item.title);\n\n    if (specific_item.inputType === \"slider\") {\n      const step_size = specific_item.max < 3 ? .01 : 1;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          value: this.props.item.value,\n          min: specific_item.min,\n          max: specific_item.max,\n          onChange: (e, val) => this.handleChange(e, val),\n          \"aria-labelledby\": \"continuous-slider\",\n          valueLabelDisplay: \"auto\",\n          step: step_size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this);\n    } else {\n      if (specific_item.inputType === \"select\") {\n        const option_list = specific_item.options.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option,\n          children: option\n        }, \"option-\" + option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this));\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.props.item.value,\n            onChange: event => this.handleSelectionChange(event),\n            children: option_list\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this);\n      }\n\n      if (specific_item.inputType === \"checkboxinput\") {\n        const current_value = this.props.item.value;\n        const option_list = specific_item.options.map(option => {\n          const style = Array.isArray(current_value) && current_value.includes(option) ? \"active\" : \"inactive\";\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: style,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: option,\n              value: option,\n              onChange: event => this.handleCheckboxChange(event, current_value),\n              checked: style === \"active\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"custom-control-label\",\n              htmlFor: option,\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"checkbox\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"checkbox__input\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  name: \"checkbox\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"checkbox__control\",\n                  children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                    xmlns: \"http://www.w3.org/2000/svg\",\n                    viewBox: \"0 0 24 24\",\n                    \"aria-hidden\": \"true\",\n                    focusable: \"false\",\n                    children: /*#__PURE__*/_jsxDEV(\"path\", {\n                      fill: \"none\",\n                      stroke: \"currentColor\",\n                      strokeWidth: \"3\",\n                      d: \"M1.73 12.91l6.37 6.37L22.79 4.59\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 100,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 99,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 98,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"radio__label\",\n                children: \"Checkbox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)]\n          }, \"checkbox-\" + option, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this);\n        });\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-control custom-checkbox \",\n          children: option_list\n        }, \"aoeu\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  }\n\n}\n\nexport default MusicBoxInput;","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Layouts/MusicBoxInput.js"],"names":["Slider","React","Component","defaults","options","to_arr","menu_items","MusicBoxInput","constructor","props","updateValue","bind","handleChange","event","val","item","title","handleSelectionChange","target","value","handleCheckboxChange","currentValue","update","Array","isArray","includes","filter","concat","render","specific_item","find","inputType","step_size","max","min","e","option_list","map","option","current_value","style"],"mappings":"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","sourcesContent":["import \"./MusicBox.css\"\n\nimport Slider from '@material-ui/core/Slider';\nimport React, {Component} from 'react'\n\nimport defaults from './defaultMenuItems'\nconst options = defaults.to_arr(defaults.menu_items())\n\nclass MusicBoxInput extends Component {\n  constructor(props){\n    super(props)\n\n    this.updateValue = this.props.updateValue.bind(this)\n  }\n\n  handleChange(event, val){\n    this.updateValue(this.props.item.title, val)\n  }\n\n  handleSelectionChange(event){\n    this.updateValue(this.props.item.title, event.target.value)\n  }\n\n  handleCheckboxChange(event, currentValue){\n    const target = event.target.value\n    let update\n    if(Array.isArray(currentValue)){\n      if(currentValue.includes(target)){\n        update = currentValue.filter(item => item !== target)\n      } else {\n        update =  currentValue.concat(target);\n      }\n    } else {\n      update = [target]\n    }\n    this.updateValue(this.props.item.title, update)\n    // this.updateValue(this.props.item.title, event.target.value)\n  }\n\n  render() {\n    const specific_item = options.find(item => item.title===this.props.item.title);\n\n    if(specific_item.inputType === \"slider\"){\n      const step_size = specific_item.max < 3 ? .01 : 1;\n\n      return(\n        <div>\n        <Slider\n          value={this.props.item.value}\n          min={specific_item.min}\n          max={specific_item.max}\n          onChange={(e,val) => this.handleChange(e,val)}\n          aria-labelledby=\"continuous-slider\"\n          valueLabelDisplay=\"auto\"\n          step={step_size}/>\n        </div>\n        );\n    } else {\n      if(specific_item.inputType === \"select\"){\n        const option_list = specific_item.options.map(option => (\n          <option\n            value={option}\n            key={\"option-\"+option}>\n              {option}\n          </option>\n        ))\n        return(\n          <div>\n            <select\n              value={this.props.item.value}\n              onChange={event => this.handleSelectionChange(event)} >\n              {option_list}\n            </select>\n          </div>\n        );\n      }if(specific_item.inputType === \"checkboxinput\"){\n        const current_value = this.props.item.value;\n        const option_list = specific_item.options.map(option => {\n          const style = Array.isArray(current_value) && current_value.includes(option) ? \"active\" : \"inactive\";\n\n          return(\n            <div\n              key={\"checkbox-\"+option}\n              className={style}>\n                <input\n                  type=\"checkbox\"\n                  id={option}\n                  value={option}\n                  onChange={(event) => this.handleCheckboxChange(event, current_value)}\n                  checked={style===\"active\"} />\n                <label className=\"custom-control-label\" htmlFor={option}>\n                  {option}\n                </label>\n\n                <label className=\"checkbox\">\n                  <span className=\"checkbox__input\">\n                    <input type=\"checkbox\" name=\"checkbox\" />\n                    <span className=\"checkbox__control\">\n                      <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' aria-hidden=\"true\" focusable=\"false\">\n                        <path fill='none' stroke='currentColor' strokeWidth='3' d='M1.73 12.91l6.37 6.37L22.79 4.59' /></svg>\n                    </span>\n                  </span>\n                  <span className=\"radio__label\">Checkbox</span>\n                </label>\n            </div>\n          );\n        });\n        return (\n          <div key=\"aoeu\" className=\"custom-control custom-checkbox \">\n            {option_list}\n          </div>\n        );\n      }\n    }\n  }\n}\n\nexport default MusicBoxInput;\n"]},"metadata":{},"sourceType":"module"}