{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Layouts/MainContent/MusicBox.js\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FiberNewTwoToneIcon from '@material-ui/icons/FiberNewTwoTone';\nimport TransitionHover from '../IconHovered';\nimport \"./MusicBox.css\";\nimport \"./checkbox.scss\";\nimport \"./MuseNetComponent.css\";\nimport Randomizer from \"./Randomize\";\nimport InputHeader from \"./InputHeader\";\nimport React, { Component } from 'react';\nimport defaults from '../../defaultMenuItems';\nconst options = defaults.to_arr(defaults.menu_items());\n\nclass MusicBox extends Component {\n  constructor(props) {\n    super(props);\n    this.dissmissMenuItem = this.props.clickback.bind(this);\n    this.updateValue = this.props.updateValue.bind(this);\n    this.resetState = this.props.resetState.bind(this);\n    this.randomizeState = this.props.randomizeState.bind(this);\n    this.state = {\n      error_text: null\n    };\n  }\n\n  resetStateHandler(event) {\n    this.resetState();\n  }\n\n  send_gen(parameters) {\n    if (!document.getElementById(\"email\").value.includes(\"@\")) {\n      this.setState({\n        error_text: \"invalid email format\"\n      });\n      return;\n    }\n\n    var dict = {};\n    options.forEach(item => {\n      let found_item = parameters.find(spec => item.title === spec.title);\n      console.log(item.title + \" | found | \" + found_item);\n      dict[item.toParam] = found_item ? found_item.value : item.default;\n    });\n    dict[\"email\"] = document.getElementById(\"email\").value;\n    const action = \"https://1click2music.com/app/make_song/pretty\";\n    console.log(JSON.stringify(dict));\n    fetch(action, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(dict)\n    }).then(response => {\n      if (response.status === 200) {\n        let success_url = \"https://www.1click2music.com/sent_email\";\n        window.location.href = success_url;\n      }\n    });\n  }\n\n  render() {\n    let gen_and_send;\n    let relevant = this.props.invokedMenuItems.map(item => {\n      return /*#__PURE__*/_jsxDEV(InputHeader, {\n        clickback: this.dissmissMenuItem,\n        item: item,\n        updateValue: this.updateValue\n      }, \"input-\" + item.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this);\n    });\n\n    if (relevant.length === 0) {\n      relevant = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"placeholder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 20\n      }, this);\n      gen_and_send = null;\n    } else {\n      gen_and_send = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-have-been-selected\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"refresher\",\n          children: /*#__PURE__*/_jsxDEV(TransitionHover, {\n            children: /*#__PURE__*/_jsxDEV(FiberNewTwoToneIcon, {\n              color: \"secondary\",\n              onClick: event => this.resetStateHandler()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            className: \"inputemail\",\n            placeholder: \"Enter email...\",\n            id: \"email\",\n            helperText: this.state.error_text,\n            label: this.state.error_text === null ? \"\" : \"Error\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            className: \"submitbutton\",\n            onClick: () => this.send_gen(this.props.invokedMenuItems),\n            children: \"create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this);\n    }\n\n    let scale = !gen_and_send ? \"only-element\" : \"\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"music-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submit-form centered-header\",\n        children: [gen_and_send, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"shaker-container\",\n          children: /*#__PURE__*/_jsxDEV(Randomizer, {\n            scale: scale,\n            updateValue: this.updateValue,\n            toggleMenuItems: this.dissmissMenuItem,\n            randomizeState: this.randomizeState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playarea \" + scale,\n        children: relevant\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default MusicBox;","map":{"version":3,"sources":["/Users/philbrockman/coding/local-coding-projects/musicaldashboard-refactored/src/Layouts/MainContent/MusicBox.js"],"names":["TextField","Button","FiberNewTwoToneIcon","TransitionHover","Randomizer","InputHeader","React","Component","defaults","options","to_arr","menu_items","MusicBox","constructor","props","dissmissMenuItem","clickback","bind","updateValue","resetState","randomizeState","state","error_text","resetStateHandler","event","send_gen","parameters","document","getElementById","value","includes","setState","dict","forEach","item","found_item","find","spec","title","console","log","toParam","default","action","JSON","stringify","fetch","method","headers","body","then","response","status","success_url","window","location","href","render","gen_and_send","relevant","invokedMenuItems","map","length","scale"],"mappings":"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","sourcesContent":["import TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport FiberNewTwoToneIcon from '@material-ui/icons/FiberNewTwoTone';\nimport TransitionHover from '../IconHovered'\n\nimport \"./MusicBox.css\";\nimport \"./checkbox.scss\";\nimport \"./MuseNetComponent.css\"\nimport Randomizer from \"./Randomize\"\nimport InputHeader from \"./InputHeader\"\n\nimport React, {Component} from 'react';\n\nimport defaults from '../../defaultMenuItems'\nconst options = defaults.to_arr(defaults.menu_items())\n\nclass MusicBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dissmissMenuItem = this.props.clickback.bind(this);\n    this.updateValue      = this.props.updateValue.bind(this);\n    this.resetState       = this.props.resetState.bind(this);\n    this.randomizeState   = this.props.randomizeState.bind(this);\n\n    this.state = {\n      error_text: null\n    }\n  }\n\n  resetStateHandler(event) {\n    this.resetState();\n  }\n\n  send_gen(parameters){\n    if(!document.getElementById(\"email\").value.includes(\"@\")){\n      this.setState({error_text: \"invalid email format\"})\n      return;\n    }\n\n    var dict = {}\n    options.forEach(item => {\n      let found_item = parameters.find(spec => item.title===spec.title);\n      console.log(item.title + \" | found | \" + found_item)\n      dict[item.toParam] = found_item ? found_item.value : item.default;\n    })\n\n    dict[\"email\"] = document.getElementById(\"email\").value\n    const action = \"https://1click2music.com/app/make_song/pretty\"\n\n    console.log(JSON.stringify(dict))\n\n    fetch(action, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(dict)\n    }).then(response => {\n      if (response.status ===  200){\n        let success_url = \"https://www.1click2music.com/sent_email\"\n        window.location.href = (success_url);\n      }\n    })\n  }\n\n  render() {\n    let gen_and_send\n    let relevant = this.props.invokedMenuItems.map(item => {\n      return(\n          <InputHeader\n            key={\"input-\"+item.title}\n            clickback={this.dissmissMenuItem }\n            item={item}\n            updateValue={this.updateValue}\n            />\n      );\n    })\n\n    if(relevant.length === 0){\n      relevant =  (<div className=\"placeholder\"></div>);\n      gen_and_send = null;\n    } else{\n      gen_and_send = (\n        <div className=\"options-have-been-selected\">\n          <span className=\"refresher\">\n            <TransitionHover>\n              <FiberNewTwoToneIcon color=\"secondary\" onClick={(event) => this.resetStateHandler()} />\n            </TransitionHover>\n          </span>\n          <span>\n            <TextField\n              className=\"inputemail\"\n              placeholder=\"Enter email...\"\n              id=\"email\"\n              helperText={this.state.error_text}\n              label={this.state.error_text === null ? \"\": \"Error\"}\n              variant=\"outlined\"\n              />\n            <Button\n              variant=\"contained\"\n              className=\"submitbutton\"\n              onClick={() => this.send_gen(this.props.invokedMenuItems)}>\n              create</Button>\n          </span>\n        </div>\n        );\n    }\n\n    let scale = !gen_and_send ? \"only-element\" : \"\";\n\n\n    return (\n      <div className=\"music-box\">\n        <div className=\"submit-form centered-header\">\n          {gen_and_send}\n          <div className=\"shaker-container\">\n            <Randomizer\n              scale={scale}\n              updateValue={this.updateValue}\n              toggleMenuItems={this.dissmissMenuItem}\n              randomizeState={this.randomizeState}/>\n          </div>\n        </div>\n        <div className={\"playarea \" + scale}>\n          {relevant}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MusicBox;\n"]},"metadata":{},"sourceType":"module"}